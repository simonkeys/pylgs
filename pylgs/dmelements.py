"""Operators on density-matrix elements"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/dmelements.ipynb.

# %% auto 0
__all__ = ['parse_dm_element', 'population_element', 'population', 'level_label', 'levels', 'level_population', 'sum_over_dm']

# %% ../nbs/api/dmelements.ipynb
import importlib

from .imports import *
from .utilities.nbdev import DictTbl, AttributeTbl
from .utilities.testing import test_array
from .utilities.sparse import sparse_kronecker_matrix, sparse_toeplitz, sparse_identity, sparse_diag, sparse
from .utilities.numpy import sym_range
from .pymor.parameters import *
from .pymor.vectorarrays import *
from .pymor.operators import *
from .pymor.timestepping import *
from .pymor.grids import *
from .pymor.models import *
from pymor.vectorarrays.interface import VectorArray
from pymor.operators.interface import Operator

# %% ../nbs/api/dmelements.ipynb
_dm_element_hfz = re.compile('ρ<sub>([^,]+), \(([^,]+), ([^,]+), ([^)]+)\), \(([^,]+), ([^,]+), ([^)]+)\)</sub>')
_dm_element_toy = re.compile('ρ<sub>([^,]+), ([^,]+), ([^,]+)</sub>')

# %% ../nbs/api/dmelements.ipynb
def parse_dm_element(s):
    if match := _dm_element_hfz.findall(s):
        return match[0][0], match[0][1:4], match[0][4:7] 
    if match := _dm_element_toy.findall(s): 
        return match[0][0], (match[0][1],), (match[0][2],)

# %% ../nbs/api/dmelements.ipynb
def population_element(s):
    parsed_dm = parse_dm_element(s)
    return parsed_dm[1] == parsed_dm[2]

# %% ../nbs/api/dmelements.ipynb
# Make this a projection operator onto populations (diagonal elements)
# Then can have sum operators to sum over hyperfine, fine, or all elements
def population(dm_elements):
    return ScaleOperator(
        xr.apply_ufunc(population_element, dm_elements, vectorize=True).astype(bool), 
        name="Population"
    )

# %% ../nbs/api/dmelements.ipynb
@dispatch
def level_label(expr:str):
    return parse_dm_element(expr)[1][0]

@dispatch
def level_label(expr:DataArray):
    return xr.apply_ufunc(level_label, expr, vectorize=True)

# %% ../nbs/api/dmelements.ipynb
def levels(dm_elements):
    return xr.Variable(
        'Level', 
        list(set().union(xr.apply_ufunc(level_label, dm_elements, vectorize=True).data))
    )

# %% ../nbs/api/dmelements.ipynb
def level_population(dm_elements):
    return XarrayMatrixOperator(
        xr.concat([level == level_label(dm_elements) for level in levels(dm_elements)], levels(dm_elements)), 
        name="Population"
    ) * population(dm_elements)

# %% ../nbs/api/dmelements.ipynb
def sum_over_dm(dm_elements):
    return SumOperator({'Density matrix (source)': dm_elements})
